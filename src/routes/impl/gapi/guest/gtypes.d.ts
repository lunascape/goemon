/* tslint:disable */
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface Query {
  _?: boolean;
  hello?: string;
}

export interface Mutation {
  _?: boolean;
}

export interface Subscription {
  _?: boolean;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface Resolver {
  Query?: QueryTypeResolver;
  Mutation?: MutationTypeResolver;
  Subscription?: SubscriptionTypeResolver;
}
export interface QueryTypeResolver<TParent = any> {
  _?: QueryTo_Resolver<TParent>;
  hello?: QueryToHelloResolver<TParent>;
}

export interface QueryTo_Resolver<TParent = any, TResult = boolean | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface QueryToHelloResolver<TParent = any, TResult = string | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface MutationTypeResolver<TParent = any> {
  _?: MutationTo_Resolver<TParent>;
}

export interface MutationTo_Resolver<TParent = any, TResult = boolean | null> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult | Promise<TResult>;
}

export interface SubscriptionTypeResolver<TParent = any> {
  _?: SubscriptionTo_Resolver<TParent>;
}

export interface SubscriptionTo_Resolver<TParent = any, TResult = boolean | null> {
  resolve?: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
  subscribe: (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
}
